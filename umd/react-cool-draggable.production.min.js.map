{"version":3,"file":"react-cool-draggable.production.min.js","mappings":"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","sources":["webpack://ReactCoolDraggable/webpack/universalModuleDefinition","webpack://ReactCoolDraggable/external umd {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://ReactCoolDraggable/webpack/bootstrap","webpack://ReactCoolDraggable/webpack/runtime/compat get default export","webpack://ReactCoolDraggable/webpack/runtime/define property getters","webpack://ReactCoolDraggable/webpack/runtime/hasOwnProperty shorthand","webpack://ReactCoolDraggable/webpack/runtime/make namespace object","webpack://ReactCoolDraggable/./src/context.tsx","webpack://ReactCoolDraggable/./src/utils.ts","webpack://ReactCoolDraggable/./src/droppable.tsx","webpack://ReactCoolDraggable/./src/draggable.tsx","webpack://ReactCoolDraggable/./src/methods.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ReactCoolDraggable\", [\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactCoolDraggable\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"ReactCoolDraggable\"] = factory(root[\"React\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__787__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__787__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import React, { useReducer, createContext, useMemo, useContext } from 'react';\r\n\r\nimport type { ID } from './types';\r\n\r\nexport type DragDropContextProps = {\r\n  onDragEnd: (options: OnDragEndOptions) => void;\r\n  children: React.ReactNode;\r\n};\r\n\r\nconst DragDropContext: React.FC<DragDropContextProps> = props => {\r\n  const { children, onDragEnd } = props;\r\n  const contextID = useMemo(() => getNextContextID(), []);\r\n  const [state, dispatch] = useReducer(reducer, inititalState);\r\n  const mergeState = (value: Partial<ContextState>) => dispatch({ value });\r\n  const resetState = () => {\r\n    state.onComplete();\r\n    mergeState({\r\n      isDragging: false,\r\n      activeDroppableID: null,\r\n      activeDraggableID: null,\r\n      nodeWidth: null,\r\n      nodeHeight: null,\r\n      scrollContainer: null,\r\n      unsubscribers: [],\r\n      onComplete: null,\r\n      onInsertPlaceholder: null,\r\n    });\r\n  };\r\n  const value = useMemo(() => {\r\n    state.contextID = contextID;\r\n\r\n    return {\r\n      state,\r\n      mergeState,\r\n      resetState,\r\n      onDragEnd,\r\n    };\r\n  }, [state, onDragEnd]);\r\n\r\n  return <Context.Provider value={value}>{children}</Context.Provider>;\r\n};\r\n\r\nexport type DragDropContextValue = {\r\n  state: ContextState;\r\n  mergeState: (state: Partial<ContextState>) => void;\r\n  resetState: () => void;\r\n  onDragEnd: (options: OnDragEndOptions) => void;\r\n};\r\n\r\ntype ContextState = {\r\n  isDragging: boolean;\r\n  contextID: number;\r\n  activeDroppableID: ID;\r\n  activeDroppableGroupID: ID;\r\n  activeDraggableID: ID;\r\n  nodeWidth: number;\r\n  nodeHeight: number;\r\n  scrollContainer: HTMLElement;\r\n  unsubscribers: Array<() => void>;\r\n  onComplete: () => void;\r\n  onInsertPlaceholder: () => void;\r\n};\r\n\r\nconst Context = createContext<DragDropContextValue>(null);\r\n\r\nconst inititalState: ContextState = {\r\n  isDragging: false,\r\n  contextID: null,\r\n  activeDroppableID: null,\r\n  activeDroppableGroupID: null,\r\n  activeDraggableID: null,\r\n  nodeWidth: null,\r\n  nodeHeight: null,\r\n  scrollContainer: null,\r\n  unsubscribers: [],\r\n  onComplete: null,\r\n  onInsertPlaceholder: null,\r\n};\r\n\r\nlet nextContextID = 0;\r\n\r\nfunction getNextContextID() {\r\n  return ++nextContextID;\r\n}\r\n\r\nfunction reducer(state: ContextState, action: { value: Partial<ContextState> }) {\r\n  return {\r\n    ...state,\r\n    ...action.value,\r\n  };\r\n}\r\n\r\nfunction useDragDropContext() {\r\n  const value = useContext(Context);\r\n\r\n  return value;\r\n}\r\n\r\nexport type OnDragEndOptions = {\r\n  draggableID: ID;\r\n  droppableID: ID;\r\n  droppableGroupID: ID;\r\n  sourceIdx: number;\r\n  destinationIdx: number;\r\n  isMoving: boolean;\r\n  targetNode: HTMLElement;\r\n};\r\n\r\nexport { DragDropContext, useDragDropContext };\r\n","import type { ID, Pointer } from './types';\r\n\r\nconst CONTEXT_ID_ATTR = 'data-dnd-context-id';\r\nconst DROPPABLE_ID_ATTR = 'data-dnd-droppable-id';\r\nconst DRAGGABLE_ID_ATTR = 'data-dnd-draggable-id';\r\n\r\nfunction setStyles(node: HTMLElement, style: Record<string, string | number>) {\r\n  const namesMap = {\r\n    zIndex: 'z-index',\r\n    transformOrigin: 'transform-origin',\r\n  };\r\n  const keys = Object.keys(style);\r\n\r\n  for (const key of keys) {\r\n    const propertyName = namesMap[key] || key;\r\n    const value = `${style[key]}`;\r\n\r\n    node.style.setProperty(propertyName, value);\r\n  }\r\n}\r\n\r\nfunction removeStyles(node: HTMLElement, keys: Array<string>) {\r\n  for (const key of keys) {\r\n    if (node.style.getPropertyValue(key)) {\r\n      node.style.removeProperty(key);\r\n    }\r\n  }\r\n\r\n  removeStyleAttrIfEmpty(node);\r\n}\r\n\r\nfunction getItemNodes(contextID: ID, droppableID: ID): Array<HTMLElement> {\r\n  return Array.from(\r\n    document.querySelectorAll(\r\n      `[${CONTEXT_ID_ATTR}=\"${contextID}\"][${DROPPABLE_ID_ATTR}=\"${droppableID}\"][${DRAGGABLE_ID_ATTR}]`,\r\n    ),\r\n  );\r\n}\r\n\r\nfunction detectIsActiveDraggableNode(node: HTMLElement, activeDraggableID: ID) {\r\n  return node.getAttribute(DRAGGABLE_ID_ATTR) === `${activeDraggableID}`;\r\n}\r\n\r\nfunction getActiveDraggableNode(contextID: number, activeDraggableID: ID): HTMLElement {\r\n  return document.querySelector(`[${CONTEXT_ID_ATTR}=\"${contextID}\"][${DRAGGABLE_ID_ATTR}=\"${activeDraggableID}\"]`);\r\n}\r\n\r\nfunction getActiveDroppableNode(contextID: number, activeDroppableID: ID): HTMLElement {\r\n  return document.querySelector(`[${CONTEXT_ID_ATTR}=\"${contextID}\"][${DROPPABLE_ID_ATTR}=\"${activeDroppableID}\"]`);\r\n}\r\n\r\nfunction getScrollContainer(node: HTMLElement): HTMLElement {\r\n  let style = getComputedStyle(node);\r\n  const excludeStaticParent = style.position === 'absolute';\r\n  const overflowRegex = /(auto|scroll)/;\r\n\r\n  if (style.position === 'fixed') return document.body;\r\n\r\n  for (let parent = node; (parent = parent.parentElement); ) {\r\n    style = getComputedStyle(parent);\r\n\r\n    if (excludeStaticParent && style.position === 'static') {\r\n      continue;\r\n    }\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY + style.overflowX)) return parent;\r\n  }\r\n\r\n  return document.body;\r\n}\r\n\r\nfunction getScrollContainerFromContainer(node: HTMLElement): HTMLElement {\r\n  const style = getComputedStyle(node);\r\n  const overflowRegex = /(auto|scroll)/;\r\n\r\n  if (overflowRegex.test(style.overflow + style.overflowY + style.overflowX)) {\r\n    return node;\r\n  }\r\n\r\n  return getScrollContainer(node);\r\n}\r\n\r\nfunction getNodeSize(node: HTMLElement, rect: DOMRect) {\r\n  const style = window.getComputedStyle(node);\r\n  const marginTop = parseInt(style.marginTop);\r\n  const marginBottom = parseInt(style.marginBottom);\r\n  const marginRight = parseInt(style.marginRight);\r\n  const marginLeft = parseInt(style.marginLeft);\r\n  const nodeWidth = safeNumber(rect.width + marginLeft + marginRight);\r\n  const nodeHeight = safeNumber(rect.height + marginTop + marginBottom);\r\n\r\n  return {\r\n    nodeWidth,\r\n    nodeHeight,\r\n  };\r\n}\r\n\r\nfunction safeNumber(value: number, precision = 0) {\r\n  return Number(value.toFixed(precision));\r\n}\r\n\r\nfunction getThreshold(rect: DOMRect, pointer: Pointer) {\r\n  const { top, left } = rect;\r\n  const thresholdY = top > 0 ? top : pointer.clientY < window.innerHeight / 2 ? 0 : window.innerHeight;\r\n  const thresholdX = left > 0 ? left : pointer.clientX < window.innerWidth / 2 ? 0 : window.innerWidth;\r\n\r\n  return {\r\n    thresholdY: safeNumber(thresholdY),\r\n    thresholdX: safeNumber(thresholdX),\r\n  };\r\n}\r\n\r\nfunction blockScroll(node: HTMLElement) {\r\n  const overflowValue = node.style.getPropertyValue('overflow');\r\n\r\n  node.style.setProperty('overflow', 'hidden');\r\n\r\n  return () => {\r\n    if (overflowValue) {\r\n      node.style.setProperty('overflow', overflowValue);\r\n    } else {\r\n      node.style.removeProperty('overflow');\r\n    }\r\n\r\n    removeStyleAttrIfEmpty(node);\r\n  };\r\n}\r\n\r\nfunction removeStyleAttrIfEmpty(node: HTMLElement) {\r\n  if (!node.getAttribute('style')) {\r\n    node.removeAttribute('style');\r\n  }\r\n}\r\n\r\nfunction createBooleanMap<T = any>(items: Array<T> = [], getID: (item: T) => number | string): Record<string, boolean> {\r\n  return items.reduce((acc, x) => ((acc[getID(x)] = true), acc), {});\r\n}\r\n\r\nfunction debounce<T extends (...args) => void>(fn: T, timeout = 0): T {\r\n  let timerID = null;\r\n  const debounced: any = (...args) => {\r\n    timerID && clearTimeout(timerID);\r\n    timerID = setTimeout(() => {\r\n      fn(...args);\r\n    }, timeout);\r\n  };\r\n\r\n  return debounced;\r\n}\r\n\r\nexport {\r\n  CONTEXT_ID_ATTR,\r\n  DROPPABLE_ID_ATTR,\r\n  DRAGGABLE_ID_ATTR,\r\n  setStyles,\r\n  removeStyles,\r\n  getItemNodes,\r\n  detectIsActiveDraggableNode,\r\n  getActiveDraggableNode,\r\n  getActiveDroppableNode,\r\n  getScrollContainer,\r\n  getScrollContainerFromContainer,\r\n  getNodeSize,\r\n  safeNumber,\r\n  getThreshold,\r\n  blockScroll,\r\n  createBooleanMap,\r\n  debounce,\r\n};\r\n","import React, { useRef, useLayoutEffect, useEffect, memo, useMemo, createContext, useContext } from 'react';\r\n\r\nimport { useDragDropContext } from './context';\r\nimport {\r\n  CONTEXT_ID_ATTR,\r\n  DROPPABLE_ID_ATTR,\r\n  setStyles,\r\n  removeStyles,\r\n  getItemNodes,\r\n  detectIsActiveDraggableNode,\r\n  getActiveDraggableNode,\r\n  getActiveDroppableNode,\r\n  getScrollContainerFromContainer,\r\n  safeNumber,\r\n  getThreshold,\r\n  debounce,\r\n} from './utils';\r\nimport type { ID, Direction, Pointer } from './types';\r\n\r\nexport type DroppableProps = {\r\n  direction: Direction;\r\n  droppableID: ID;\r\n  droppableGroupID: ID;\r\n  transitionTimeout?: number;\r\n  transitionTimingFn?: string;\r\n  disabled?: boolean;\r\n  debounceTimeout?: number;\r\n  children: (options: DroppableChildrenOptions) => React.ReactElement;\r\n  onDragOver?: (options: OnDragOverOptions) => void;\r\n};\r\n\r\nconst Droppable: React.FC<DroppableProps> = memo(props => {\r\n  const {\r\n    droppableID,\r\n    droppableGroupID,\r\n    direction,\r\n    transitionTimeout,\r\n    transitionTimingFn,\r\n    debounceTimeout,\r\n    disabled,\r\n    children,\r\n    onDragOver,\r\n  } = props;\r\n  const { state, mergeState, resetState, onDragEnd } = useDragDropContext();\r\n  const {\r\n    isDragging: isSomeDragging,\r\n    contextID,\r\n    nodeWidth,\r\n    nodeHeight,\r\n    activeDraggableID,\r\n    activeDroppableID,\r\n    activeDroppableGroupID,\r\n    unsubscribers,\r\n    onInsertPlaceholder,\r\n  } = state;\r\n  const isActiveGroup = !disabled && droppableGroupID === activeDroppableGroupID;\r\n  const isActive = isActiveGroup && droppableID === activeDroppableID;\r\n  const isDragging = isSomeDragging && isActive;\r\n  const rootRef = useRef<HTMLElement>(null);\r\n  const nearestNodeRef = useRef<HTMLElement>(null);\r\n  const scope = useMemo<DroppableScope>(() => ({ removePlaceholder: () => {} }), []);\r\n  const nodes = useMemo(() => (rootRef.current ? getItemNodes(contextID, droppableID) : []), [isDragging]);\r\n\r\n  const handleDragEnd = (targetNode: HTMLElement) => {\r\n    const sourceIdx = nodes.findIndex(x => detectIsActiveDraggableNode(x, activeDraggableID));\r\n    const targetRect = targetNode.getBoundingClientRect();\r\n    const isMoving = sourceIdx === -1;\r\n    let destinationIdx = 0;\r\n\r\n    for (const node of nodes) {\r\n      const rect = node.getBoundingClientRect();\r\n      const map: Record<DroppableProps['direction'], () => void> = {\r\n        vertical: () => {\r\n          if (safeNumber(targetRect.top + targetRect.height) > safeNumber(rect.top + rect.height)) {\r\n            destinationIdx++;\r\n          }\r\n        },\r\n        horizontal: () => {\r\n          if (safeNumber(targetRect.left + targetRect.width) > safeNumber(rect.left + rect.width)) {\r\n            destinationIdx++;\r\n          }\r\n        },\r\n      };\r\n\r\n      map[direction]();\r\n    }\r\n\r\n    setTimeout(() => {\r\n      scope.removePlaceholder();\r\n      nodes.forEach(x => removeStyles(x, ['transition', 'transform']));\r\n      resetState();\r\n    });\r\n\r\n    onDragEnd({\r\n      draggableID: activeDraggableID,\r\n      droppableID,\r\n      droppableGroupID,\r\n      sourceIdx,\r\n      destinationIdx,\r\n      isMoving,\r\n      targetNode,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isDragging) return;\r\n    setTimeout(() => {\r\n      nodes.forEach(x => {\r\n        const isActive = detectIsActiveDraggableNode(x, activeDraggableID);\r\n\r\n        !isActive && removeStyles(x, ['transition', 'transform']);\r\n      });\r\n    });\r\n  }, [isDragging]);\r\n\r\n  useIntersectionEffect({\r\n    contextID,\r\n    activeDraggableID,\r\n    activeDroppableID,\r\n    isActiveGroup,\r\n    isActive,\r\n    isSomeDragging,\r\n    debounceTimeout,\r\n    rootNode: rootRef.current,\r\n    unsubscribers,\r\n    onIntersect: (targetNode, pointer) => {\r\n      mergeState({\r\n        activeDroppableID: droppableID,\r\n        scrollContainer: getScrollContainerFromContainer(rootRef.current),\r\n        onInsertPlaceholder: () => {\r\n          transformNodesByTarget({\r\n            direction,\r\n            targetNode,\r\n            nodeWidth,\r\n            nodeHeight,\r\n            pointer,\r\n            activeDraggableID,\r\n            transitionTimeout,\r\n            transitionTimingFn,\r\n            nodes: getItemNodes(contextID, droppableID),\r\n            onMarkNearestNode: (nearestNode, targetNode) => {\r\n              nearestNodeRef.current = nearestNode || null;\r\n              onDragOver({ nearestNode, targetNode });\r\n            },\r\n          });\r\n        },\r\n      });\r\n    },\r\n  });\r\n\r\n  usePlaceholderEffect({\r\n    isDragging,\r\n    nodeWidth,\r\n    nodeHeight,\r\n    container: rootRef.current,\r\n    scope,\r\n    onInsertPlaceholder,\r\n  });\r\n\r\n  useMoveSensorEffect({\r\n    isDragging,\r\n    unsubscribers,\r\n    transformNodesByTargetOptions: {\r\n      direction,\r\n      nodes,\r\n      activeDraggableID,\r\n      nodeHeight,\r\n      nodeWidth,\r\n      transitionTimeout,\r\n      transitionTimingFn,\r\n      onMarkNearestNode: (nearestNode, targetNode) => {\r\n        nearestNodeRef.current = nearestNode || null;\r\n        onDragOver({ nearestNode, targetNode });\r\n      },\r\n    },\r\n  });\r\n\r\n  useMoveEndSensorEffect({\r\n    direction,\r\n    isDragging,\r\n    contextID,\r\n    activeDraggableID,\r\n    activeDroppableID,\r\n    nearestNodeRef,\r\n    transitionTimeout,\r\n    unsubscribers,\r\n    onDragEnd: handleDragEnd,\r\n  });\r\n\r\n  const contextValue = useMemo<DroppableContextValue>(\r\n    () => ({\r\n      direction,\r\n      droppableID,\r\n      droppableGroupID,\r\n      disabled,\r\n    }),\r\n    [direction, droppableID, droppableGroupID, disabled],\r\n  );\r\n\r\n  return (\r\n    <DroppableContext.Provider value={contextValue}>\r\n      {children({\r\n        ref: rootRef,\r\n        [CONTEXT_ID_ATTR]: contextID,\r\n        [DROPPABLE_ID_ATTR]: droppableID,\r\n        snapshot: {\r\n          isDragging,\r\n        },\r\n        onDragStart: defaultHandleDragStart,\r\n      })}\r\n    </DroppableContext.Provider>\r\n  );\r\n});\r\n\r\nDroppable.defaultProps = {\r\n  transitionTimeout: 200,\r\n  transitionTimingFn: 'ease-in-out',\r\n  debounceTimeout: 0,\r\n  onDragOver: () => {},\r\n};\r\n\r\ntype DroppableScope = {\r\n  removePlaceholder: () => void;\r\n};\r\n\r\ntype DroppableContextValue = {} & Pick<DroppableProps, 'direction' | 'droppableID' | 'droppableGroupID' | 'disabled'>;\r\n\r\nconst DroppableContext = createContext<DroppableContextValue>(null);\r\n\r\nfunction useDroppableContext() {\r\n  return useContext(DroppableContext);\r\n}\r\n\r\nconst defaultHandleDragStart = (e: React.MouseEvent) => e.preventDefault();\r\n\r\nexport type DroppableChildrenOptions = {\r\n  ref: React.Ref<any>;\r\n  [CONTEXT_ID_ATTR]: number;\r\n  [DROPPABLE_ID_ATTR]: ID;\r\n  snapshot: {\r\n    isDragging: boolean;\r\n  };\r\n  onDragStart: React.DragEventHandler;\r\n};\r\n\r\nexport type OnDragOverOptions = {\r\n  nearestNode: HTMLElement | null;\r\n  targetNode: HTMLElement;\r\n};\r\n\r\ntype UseIntersectionEffectOptions = {\r\n  isSomeDragging: boolean;\r\n  isActiveGroup: boolean;\r\n  isActive: boolean;\r\n  rootNode: HTMLElement;\r\n  contextID: number;\r\n  activeDroppableID: ID;\r\n  activeDraggableID: ID;\r\n  unsubscribers: Array<() => void>;\r\n  onIntersect: (targetNode: HTMLElement, pointer: Pointer) => void;\r\n} & Required<Pick<DroppableProps, 'debounceTimeout'>>;\r\n\r\nfunction useIntersectionEffect(options: UseIntersectionEffectOptions) {\r\n  const {\r\n    isSomeDragging,\r\n    isActiveGroup,\r\n    isActive,\r\n    rootNode,\r\n    contextID,\r\n    activeDroppableID,\r\n    activeDraggableID,\r\n    debounceTimeout,\r\n    unsubscribers,\r\n    onIntersect,\r\n  } = options;\r\n\r\n  useEffect(() => {\r\n    if (!isSomeDragging) return;\r\n    const handleEvent = debounce((e: MouseEvent | TouchEvent) => {\r\n      if (!isSomeDragging) return;\r\n      if (!isActiveGroup) return;\r\n      if (isActive) return;\r\n      const draggableNode = getActiveDraggableNode(contextID, activeDraggableID);\r\n      const droppableRect = rootNode.getBoundingClientRect();\r\n      const draggableRect = draggableNode.getBoundingClientRect();\r\n      const draggableRectTop = safeNumber(draggableRect.top);\r\n      const draggableRectLeft = safeNumber(draggableRect.left);\r\n      const droppableRectTop = safeNumber(droppableRect.top);\r\n      const droppableRectLeft = safeNumber(droppableRect.left);\r\n      const droppableRectHeight = safeNumber(droppableRect.height);\r\n      const droppableRectWidth = safeNumber(droppableRect.width);\r\n      const isYaxesIntersected =\r\n        draggableRectTop > droppableRectTop && draggableRectTop < droppableRectTop + droppableRectHeight;\r\n      const isXaxesIntersected =\r\n        draggableRectLeft > droppableRectLeft && draggableRectLeft < droppableRectLeft + droppableRectWidth;\r\n\r\n      if (isYaxesIntersected && isXaxesIntersected) {\r\n        const targetNode = e.target as HTMLElement;\r\n        const pointer: Pointer =\r\n          e instanceof MouseEvent\r\n            ? { clientX: e.clientX, clientY: e.clientY }\r\n            : e instanceof TouchEvent\r\n            ? { clientX: e.touches[0].clientX, clientY: e.touches[0].clientY }\r\n            : null;\r\n\r\n        onIntersect(targetNode, pointer);\r\n      }\r\n    }, debounceTimeout);\r\n\r\n    document.addEventListener('mousemove', handleEvent);\r\n    document.addEventListener('touchmove', handleEvent);\r\n\r\n    const unsubscribe = () => {\r\n      document.removeEventListener('mousemove', handleEvent);\r\n      document.removeEventListener('touchmove', handleEvent);\r\n    };\r\n\r\n    unsubscribers.push(unsubscribe);\r\n\r\n    return () => performUnsubscribers(unsubscribe, unsubscribers);\r\n  }, [isSomeDragging, activeDroppableID, rootNode]);\r\n}\r\n\r\ntype UsePlaceholderEffectOptions = {\r\n  isDragging: boolean;\r\n  nodeWidth: number;\r\n  nodeHeight: number;\r\n  container: HTMLElement;\r\n  scope: DroppableScope;\r\n  onInsertPlaceholder: () => void;\r\n};\r\n\r\nfunction usePlaceholderEffect(options: UsePlaceholderEffectOptions) {\r\n  const { isDragging, nodeWidth, nodeHeight, container, scope, onInsertPlaceholder } = options;\r\n\r\n  useLayoutEffect(() => {\r\n    let placeholder: HTMLDivElement = null;\r\n\r\n    if (isDragging) {\r\n      placeholder = document.createElement('div');\r\n\r\n      scope.removePlaceholder = () => {\r\n        placeholder.parentElement.removeChild(placeholder);\r\n        scope.removePlaceholder = () => {};\r\n      };\r\n\r\n      setStyles(placeholder, {\r\n        width: `${nodeWidth}px`,\r\n        height: `${nodeHeight}px`,\r\n        flex: `0 0 auto`,\r\n      });\r\n\r\n      container.appendChild(placeholder);\r\n      onInsertPlaceholder();\r\n    }\r\n\r\n    return () => scope.removePlaceholder();\r\n  }, [isDragging]);\r\n}\r\n\r\ntype UseMoveSensorEffectOptions = {\r\n  isDragging: boolean;\r\n  unsubscribers: Array<() => void>;\r\n  transformNodesByTargetOptions: Omit<TransformNodesByTargetOptions, 'targetNode' | 'pointer'>;\r\n};\r\n\r\nfunction useMoveSensorEffect(options: UseMoveSensorEffectOptions) {\r\n  const { isDragging, unsubscribers, transformNodesByTargetOptions } = options;\r\n  const scope = useMemo(() => ({ options: null }), []);\r\n\r\n  scope.options = transformNodesByTargetOptions;\r\n\r\n  useLayoutEffect(() => {\r\n    if (!isDragging) return;\r\n\r\n    const handleEvent = debounce((e: MouseEvent | TouchEvent) => {\r\n      const targetNode = e.target as HTMLElement;\r\n      const pointer: Pointer =\r\n        e instanceof MouseEvent\r\n          ? { clientX: e.clientX, clientY: e.clientY }\r\n          : e instanceof TouchEvent\r\n          ? { clientX: e.touches[0].clientX, clientY: e.touches[0].clientY }\r\n          : null;\r\n\r\n      transformNodesByTarget({\r\n        ...scope.options,\r\n        targetNode,\r\n        pointer,\r\n      });\r\n    });\r\n\r\n    document.addEventListener('mousemove', handleEvent);\r\n    document.addEventListener('touchmove', handleEvent);\r\n\r\n    const unsubscribe = () => {\r\n      document.removeEventListener('mousemove', handleEvent);\r\n      document.removeEventListener('touchmove', handleEvent);\r\n    };\r\n\r\n    unsubscribers.push(unsubscribe);\r\n\r\n    return () => performUnsubscribers(unsubscribe, unsubscribers);\r\n  }, [isDragging]);\r\n}\r\n\r\ntype UseMoveEndSensorEffectOptions = {\r\n  direction: Direction;\r\n  isDragging: boolean;\r\n  contextID: number;\r\n  activeDraggableID: ID;\r\n  activeDroppableID: ID;\r\n  nearestNodeRef: React.MutableRefObject<HTMLElement>;\r\n  unsubscribers: Array<() => void>;\r\n  onDragEnd: (node: HTMLElement) => void;\r\n} & Required<Pick<DroppableProps, 'transitionTimeout'>>;\r\n\r\nfunction useMoveEndSensorEffect(options: UseMoveEndSensorEffectOptions) {\r\n  const {\r\n    direction,\r\n    isDragging,\r\n    contextID,\r\n    activeDraggableID,\r\n    activeDroppableID,\r\n    nearestNodeRef,\r\n    transitionTimeout,\r\n    unsubscribers,\r\n    onDragEnd,\r\n  } = options;\r\n\r\n  useLayoutEffect(() => {\r\n    if (!isDragging) return;\r\n\r\n    const handleEvent = () => {\r\n      unsubscribers.forEach(fn => fn());\r\n      unsubscribers.splice(0, unsubscribers.length);\r\n\r\n      const nearestNode = nearestNodeRef.current || null;\r\n      const hasTransform = nearestNode && window.getComputedStyle(nearestNode).transform !== 'none';\r\n\r\n      const applyTransition = () => {\r\n        const targetNode = getActiveDraggableNode(contextID, activeDraggableID);\r\n\r\n        applyTargetNodeTransition({\r\n          direction,\r\n          contextID,\r\n          activeDroppableID,\r\n          targetNode,\r\n          nearestNode,\r\n          transitionTimeout,\r\n          onComplete: onDragEnd,\r\n        });\r\n      };\r\n\r\n      if (nearestNode && hasTransform) {\r\n        setTimeout(() => {\r\n          applyTransition();\r\n        }, transitionTimeout);\r\n      } else {\r\n        applyTransition();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mouseup', handleEvent);\r\n    document.addEventListener('touchend', handleEvent);\r\n\r\n    const unsubscribe = () => {\r\n      document.removeEventListener('mouseup', handleEvent);\r\n      document.removeEventListener('touchend', handleEvent);\r\n    };\r\n\r\n    unsubscribers.push(unsubscribe);\r\n\r\n    return () => performUnsubscribers(unsubscribe, unsubscribers);\r\n  }, [isDragging]);\r\n}\r\n\r\ntype ApplyTargetNodeTransitionOptions = {\r\n  direction: Direction;\r\n  contextID: number;\r\n  activeDroppableID: ID;\r\n  targetNode: HTMLElement;\r\n  nearestNode: HTMLElement | null;\r\n  onComplete: (targetNode: HTMLElement) => void;\r\n} & Required<Pick<DroppableProps, 'transitionTimeout'>>;\r\n\r\nconst applyTargetNodeTransition = (options: ApplyTargetNodeTransitionOptions) => {\r\n  const { direction, contextID, activeDroppableID, targetNode, nearestNode, transitionTimeout, onComplete } = options;\r\n  const targetNodeStyle = window.getComputedStyle(targetNode);\r\n  const hasTransform = targetNodeStyle.transform !== 'none';\r\n  const isVertical = direction === 'vertical';\r\n  const { droppableTop, droppableLeft } = getDroppableContainerOffsets();\r\n\r\n  function getDroppableContainerOffsets() {\r\n    const droppableNode = getActiveDroppableNode(contextID, activeDroppableID);\r\n    const { top, left } = droppableNode.getBoundingClientRect();\r\n    const style = window.getComputedStyle(droppableNode);\r\n    const paddingTop = parseInt(style.paddingTop, 10);\r\n    const paddingLeft = parseInt(style.paddingLeft, 10);\r\n    const droppableTop = safeNumber(top + paddingTop);\r\n    const droppableLeft = safeNumber(left + paddingLeft);\r\n\r\n    return { droppableTop, droppableLeft };\r\n  }\r\n\r\n  const getVerticalDirectionOffset = () => {\r\n    if (nearestNode) {\r\n      const { bottom } = nearestNode.getBoundingClientRect();\r\n      const marginTop = parseInt(targetNodeStyle.marginTop, 10);\r\n\r\n      return safeNumber(bottom + marginTop);\r\n    }\r\n\r\n    return droppableTop;\r\n  };\r\n\r\n  const getHorizontalDirectionOffset = () => {\r\n    if (nearestNode) {\r\n      const { left, width } = nearestNode.getBoundingClientRect();\r\n      const marginLeft = parseInt(targetNodeStyle.marginLeft, 10);\r\n\r\n      return safeNumber(left + width + marginLeft);\r\n    }\r\n\r\n    return droppableTop;\r\n  };\r\n\r\n  const offset = isVertical ? getVerticalDirectionOffset() : getHorizontalDirectionOffset();\r\n\r\n  if (hasTransform) {\r\n    const styles = {\r\n      transition: `transform ${transitionTimeout}ms ease-in-out, top ${transitionTimeout}ms ease-in-out, left ${transitionTimeout}ms ease-in-out`,\r\n      transform: `translate3D(0, 0, 0)`,\r\n      top: undefined,\r\n      left: undefined,\r\n    };\r\n\r\n    if (isVertical) {\r\n      styles.top = `${offset}px`;\r\n      styles.left = `${droppableLeft}px`;\r\n    } else {\r\n      styles.top = `${droppableTop}px`;\r\n      styles.left = `${offset}px`;\r\n    }\r\n\r\n    setStyles(targetNode, styles);\r\n\r\n    setTimeout(() => {\r\n      onComplete(targetNode);\r\n    }, transitionTimeout);\r\n  } else {\r\n    onComplete(targetNode);\r\n  }\r\n};\r\n\r\ntype TransformNodesByTargetOptions = {\r\n  direction: Direction;\r\n  targetNode: HTMLElement;\r\n  pointer: Pointer;\r\n  nodes: Array<HTMLElement>;\r\n  activeDraggableID: ID;\r\n  nodeHeight: number;\r\n  nodeWidth: number;\r\n  onMarkNearestNode?: (nearestNode: HTMLElement, targetNode: HTMLElement) => void;\r\n} & Pick<DroppableProps, 'transitionTimeout' | 'transitionTimingFn'>;\r\n\r\nconst transformNodesByTarget = (options: TransformNodesByTargetOptions) => {\r\n  const {\r\n    direction,\r\n    targetNode,\r\n    pointer,\r\n    nodes,\r\n    activeDraggableID,\r\n    nodeHeight,\r\n    nodeWidth,\r\n    transitionTimeout = 0,\r\n    transitionTimingFn = '',\r\n    onMarkNearestNode = () => {},\r\n  } = options;\r\n  const targetRect = targetNode.getBoundingClientRect();\r\n  let nearestNode: HTMLElement = null;\r\n  let minimalDiff = Infinity;\r\n  const fns: Array<() => void> = [];\r\n\r\n  for (const node of nodes) {\r\n    if (detectIsActiveDraggableNode(node, activeDraggableID)) continue;\r\n    const rect = node.getBoundingClientRect();\r\n    const top = safeNumber(rect.top);\r\n    const left = safeNumber(rect.left);\r\n    const { thresholdY, thresholdX } = getThreshold(targetRect, pointer);\r\n    const map: Record<Direction, () => void> = {\r\n      vertical: () => {\r\n        if (thresholdY <= top || thresholdY - top === 1) {\r\n          setStyles(node, {\r\n            transition: `transform ${transitionTimeout}ms ${transitionTimingFn}`,\r\n            transform: `translate3d(0px, ${nodeHeight}px, 0px)`,\r\n          });\r\n        } else {\r\n          removeStyles(node, ['transform']);\r\n\r\n          const diff = safeNumber(thresholdY - top);\r\n\r\n          if (diff < minimalDiff) {\r\n            minimalDiff = diff;\r\n            nearestNode = node;\r\n          }\r\n        }\r\n      },\r\n      horizontal: () => {\r\n        if (thresholdX <= left || thresholdX - left === 1) {\r\n          setStyles(node, {\r\n            transition: `transform ${transitionTimeout}ms ${transitionTimingFn}`,\r\n            transform: `translate3d(${nodeWidth}px, 0px, 0px)`,\r\n          });\r\n        } else {\r\n          removeStyles(node, ['transform']);\r\n\r\n          const diff = safeNumber(thresholdX - left);\r\n\r\n          if (diff < minimalDiff) {\r\n            minimalDiff = diff;\r\n            nearestNode = node;\r\n          }\r\n        }\r\n      },\r\n    };\r\n\r\n    fns.push(map[direction]);\r\n  }\r\n\r\n  // read first getBoundingClientRect in loop, then change styles to improve performance\r\n  fns.forEach(fn => fn());\r\n\r\n  onMarkNearestNode(nearestNode, targetNode);\r\n};\r\n\r\nfunction performUnsubscribers(unsubscribe: () => void, unsubscribers: Array<() => void>) {\r\n  const idx = unsubscribers.findIndex(x => x === unsubscribe);\r\n\r\n  if (idx !== -1) {\r\n    unsubscribe();\r\n    unsubscribers.splice(idx, 1);\r\n  }\r\n}\r\n\r\nexport { Droppable, useDroppableContext, transformNodesByTarget };\r\n","import React, { useRef, useMemo, useLayoutEffect, memo } from 'react';\r\n\r\nimport { useDragDropContext } from './context';\r\nimport { useDroppableContext, transformNodesByTarget } from './droppable';\r\nimport {\r\n  CONTEXT_ID_ATTR,\r\n  DROPPABLE_ID_ATTR,\r\n  DRAGGABLE_ID_ATTR,\r\n  setStyles,\r\n  removeStyles,\r\n  getScrollContainer,\r\n  getNodeSize,\r\n  blockScroll,\r\n  getItemNodes,\r\n} from './utils';\r\nimport type { ID, Pointer, Coordinates } from './types';\r\n\r\nexport type DraggableProps = {\r\n  draggableID: ID;\r\n  children: (options: DraggableChildrenOptions) => React.ReactElement;\r\n};\r\n\r\nconst Draggable: React.FC<DraggableProps> = memo(props => {\r\n  const { draggableID, children } = props;\r\n  const { state, mergeState } = useDragDropContext();\r\n  const { droppableID, droppableGroupID, direction, disabled } = useDroppableContext();\r\n  const { contextID, scrollContainer } = state;\r\n  const rootRef = useRef<HTMLDivElement>(null);\r\n  const isActive = state.isDragging && state.activeDraggableID === draggableID;\r\n  const scope = useMemo<DraggableScope>(() => ({ removeSensor: null, scrollContainer: null }), []);\r\n\r\n  scope.scrollContainer = scrollContainer;\r\n\r\n  useLayoutEffect(() => () => scope.removeSensor && scope.removeSensor(), []);\r\n\r\n  const handleMouseDown = (startEvent: React.MouseEvent) => {\r\n    if (disabled || startEvent.buttons !== 1 || state.onComplete) return;\r\n\r\n    const targetNode = rootRef.current;\r\n    const rect = targetNode.getBoundingClientRect();\r\n    const scrollContainer = getScrollContainer(targetNode);\r\n    const { nodeWidth, nodeHeight } = getNodeSize(targetNode, rect);\r\n    const startPointer: Pointer = {\r\n      clientX: startEvent.clientX,\r\n      clientY: startEvent.clientY,\r\n    };\r\n\r\n    const handleMoveEvent = (moveEvent: MouseEvent) => {\r\n      const movePointer: Pointer = {\r\n        clientX: moveEvent.clientX,\r\n        clientY: moveEvent.clientY,\r\n      };\r\n\r\n      applyMoveSensor({\r\n        node: targetNode,\r\n        scrollContainer: scope.scrollContainer,\r\n        startPointer,\r\n        movePointer,\r\n      });\r\n    };\r\n\r\n    const removeSensor = () => {\r\n      document.removeEventListener('mousemove', handleMoveEvent);\r\n    };\r\n\r\n    const handleComplete = () => removeNodeStyles(targetNode);\r\n\r\n    const handleInsertPlaceholder = () => {\r\n      transformNodesByTarget({\r\n        direction,\r\n        targetNode,\r\n        nodeWidth,\r\n        nodeHeight,\r\n        pointer: startPointer,\r\n        activeDraggableID: draggableID,\r\n        nodes: getItemNodes(contextID, droppableID),\r\n      });\r\n    };\r\n\r\n    setNodeDragStyles(targetNode, rect);\r\n    mergeState({\r\n      isDragging: true,\r\n      activeDroppableID: droppableID,\r\n      activeDroppableGroupID: droppableGroupID,\r\n      activeDraggableID: draggableID,\r\n      nodeWidth,\r\n      nodeHeight,\r\n      scrollContainer,\r\n      unsubscribers: [removeSensor],\r\n      onComplete: handleComplete,\r\n      onInsertPlaceholder: handleInsertPlaceholder,\r\n    });\r\n\r\n    scope.removeSensor = () => {\r\n      removeSensor();\r\n      scope.removeSensor = null;\r\n    };\r\n    document.addEventListener('mousemove', handleMoveEvent);\r\n  };\r\n\r\n  const handleTouchStart = (startEvent: React.TouchEvent) => {\r\n    if (disabled || state.onComplete) return;\r\n\r\n    const targetNode = rootRef.current;\r\n    const rect = targetNode.getBoundingClientRect();\r\n    const scrollContainer = getScrollContainer(targetNode);\r\n    const { nodeWidth, nodeHeight } = getNodeSize(targetNode, rect);\r\n    const startPointer: Pointer = {\r\n      clientX: startEvent.touches[0].clientX,\r\n      clientY: startEvent.touches[0].clientY,\r\n    };\r\n    const unblockScroll = blockScroll(document.body);\r\n\r\n    const handleEvent = (moveEvent: TouchEvent) => {\r\n      const movePointer: Pointer = {\r\n        clientX: moveEvent.touches[0].clientX,\r\n        clientY: moveEvent.touches[0].clientY,\r\n      };\r\n\r\n      applyMoveSensor({\r\n        node: targetNode,\r\n        scrollContainer: scope.scrollContainer,\r\n        startPointer,\r\n        movePointer,\r\n      });\r\n    };\r\n\r\n    const removeSensor = () => {\r\n      document.removeEventListener('touchmove', handleEvent);\r\n    };\r\n\r\n    const handleComplete = () => {\r\n      removeNodeStyles(targetNode);\r\n      unblockScroll();\r\n    };\r\n\r\n    const handleInsertPlaceholder = () => {\r\n      transformNodesByTarget({\r\n        direction,\r\n        targetNode,\r\n        nodeWidth,\r\n        nodeHeight,\r\n        pointer: startPointer,\r\n        activeDraggableID: draggableID,\r\n        nodes: getItemNodes(contextID, droppableID),\r\n      });\r\n    };\r\n\r\n    setNodeDragStyles(targetNode, rect);\r\n\r\n    transformNodesByTarget({\r\n      targetNode,\r\n      direction,\r\n      nodeWidth,\r\n      nodeHeight,\r\n      pointer: startPointer,\r\n      activeDraggableID: draggableID,\r\n      nodes: getItemNodes(contextID, droppableID),\r\n    });\r\n\r\n    mergeState({\r\n      isDragging: true,\r\n      activeDroppableID: droppableID,\r\n      activeDroppableGroupID: droppableGroupID,\r\n      activeDraggableID: draggableID,\r\n      nodeWidth,\r\n      nodeHeight,\r\n      scrollContainer,\r\n      unsubscribers: [removeSensor],\r\n      onComplete: handleComplete,\r\n      onInsertPlaceholder: handleInsertPlaceholder,\r\n    });\r\n\r\n    scope.removeSensor = () => {\r\n      removeSensor();\r\n      scope.removeSensor = null;\r\n    };\r\n    document.addEventListener('touchmove', handleEvent);\r\n  };\r\n\r\n  return children({\r\n    rootProps: {\r\n      ref: rootRef,\r\n      draggable: false,\r\n      [CONTEXT_ID_ATTR]: contextID,\r\n      [DROPPABLE_ID_ATTR]: droppableID,\r\n      [DRAGGABLE_ID_ATTR]: draggableID,\r\n    },\r\n    draggableProps: {\r\n      onMouseDown: handleMouseDown,\r\n      onTouchStart: handleTouchStart,\r\n    },\r\n    snapshot: {\r\n      isDragging: isActive,\r\n    },\r\n  });\r\n});\r\n\r\ntype DraggableChildrenOptions = {\r\n  rootProps: {\r\n    ref: React.Ref<any>;\r\n    draggable: false;\r\n    [CONTEXT_ID_ATTR]: number;\r\n    [DROPPABLE_ID_ATTR]: ID;\r\n    [DRAGGABLE_ID_ATTR]: ID;\r\n  };\r\n  draggableProps: {\r\n    onMouseDown: (e: React.MouseEvent) => void;\r\n    onTouchStart: (e: React.TouchEvent) => void;\r\n  };\r\n  snapshot: {\r\n    isDragging: boolean;\r\n  };\r\n};\r\n\r\ntype DraggableScope = {\r\n  removeSensor: () => void;\r\n  scrollContainer: HTMLElement;\r\n};\r\n\r\ntype ApplyMoveSensorOptions = {\r\n  node: HTMLElement;\r\n  startPointer: Pointer;\r\n  movePointer: Pointer;\r\n  scrollContainer: HTMLElement;\r\n};\r\n\r\nfunction applyMoveSensor(options: ApplyMoveSensorOptions) {\r\n  const { node, startPointer, movePointer, scrollContainer } = options;\r\n  const { x, y } = getCoordinates({ movePointer, startPointer });\r\n\r\n  transformNodePosition(node, { x, y });\r\n\r\n  requestAnimationFrame(() => {\r\n    const isRoot = scrollContainer === document.body;\r\n    const element = isRoot ? window : scrollContainer;\r\n    const velocity = 1000;\r\n\r\n    if (movePointer.clientY > window.innerHeight || movePointer.clientY < 0) {\r\n      const shift = isRoot ? window.scrollY : scrollContainer.scrollTop;\r\n\r\n      element.scroll({\r\n        top: movePointer.clientY > 0 ? movePointer.clientY + shift : movePointer.clientY + shift - velocity,\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n\r\n    if (movePointer.clientX > window.innerWidth || movePointer.clientX < 0) {\r\n      const shift = isRoot ? window.scrollX : scrollContainer.scrollLeft;\r\n\r\n      element.scroll({\r\n        left: movePointer.clientX > 0 ? movePointer.clientX + shift : movePointer.clientX + shift - velocity,\r\n        behavior: 'smooth',\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\ntype GetCoordinatesOptions = {\r\n  movePointer: Pointer;\r\n  startPointer: Pointer;\r\n};\r\n\r\nfunction getCoordinates(options: GetCoordinatesOptions): Coordinates {\r\n  const { movePointer, startPointer } = options;\r\n  const x = movePointer.clientX - startPointer.clientX;\r\n  const y = movePointer.clientY - startPointer.clientY;\r\n\r\n  return {\r\n    x,\r\n    y,\r\n  };\r\n}\r\n\r\nfunction setNodeDragStyles(node: HTMLElement, rect: DOMRect) {\r\n  const style = window.getComputedStyle(node);\r\n  const marginTop = parseInt(style.marginTop);\r\n  const marginLeft = parseInt(style.marginLeft);\r\n  const top = rect.top - marginTop;\r\n  const left = rect.left - marginLeft;\r\n\r\n  setStyles(node, {\r\n    position: 'fixed',\r\n    zIndex: '100000',\r\n    top: `${top}px`,\r\n    left: `${left}px`,\r\n    width: `${rect.width}px`,\r\n    height: `${rect.height}px`,\r\n    transformOrigin: '0 0',\r\n    transition: 'none',\r\n  });\r\n}\r\n\r\nfunction transformNodePosition(node: HTMLElement, { x, y }: Coordinates) {\r\n  setStyles(node, {\r\n    transform: `translate3D(${x}px, ${y}px, 0px)`,\r\n  });\r\n}\r\n\r\nfunction removeNodeStyles(node: HTMLElement) {\r\n  removeStyles(node, [\r\n    'position',\r\n    'top',\r\n    'left',\r\n    'z-index',\r\n    'width',\r\n    'height',\r\n    'transform',\r\n    'transition',\r\n    'transform-origin',\r\n  ]);\r\n}\r\n\r\nexport { Draggable };\r\n","import { type OnDragEndOptions } from './context';\r\nimport { createBooleanMap } from './utils';\r\nimport type { ID } from './types';\r\n\r\ntype ReorderOptions<T> = {\r\n  items: Array<T>;\r\n  getDroppableID: (x: T) => ID;\r\n  getDraggableID: (x: T) => ID;\r\n} & OnDragEndOptions;\r\n\r\nfunction reorder<T>(options: ReorderOptions<T>) {\r\n  const { items, sourceIdx, destinationIdx, droppableID, getDroppableID, getDraggableID } = options;\r\n  const droppableItems = items.filter(x => getDroppableID(x) === droppableID);\r\n  const idsMap = createBooleanMap(droppableItems, x => getDraggableID(x));\r\n  const [removed] = droppableItems.splice(sourceIdx, 1);\r\n\r\n  droppableItems.splice(destinationIdx, 0, removed);\r\n\r\n  const result = [...items.filter(x => !idsMap[getDraggableID(x)]), ...droppableItems];\r\n\r\n  return result;\r\n}\r\n\r\ntype MoveOptions<T> = {\r\n  items: Array<T>;\r\n  getDroppableID: (x: T) => ID;\r\n  setDroppableID: (x: T, droppableID: ID) => void;\r\n  getDraggableID: (x: T) => ID;\r\n} & OnDragEndOptions;\r\n\r\nfunction move<T>(options: MoveOptions<T>) {\r\n  const { items, destinationIdx, droppableID, draggableID, getDroppableID, getDraggableID, setDroppableID } = options;\r\n  const droppableItems = items.filter(x => getDroppableID(x) === droppableID);\r\n  const idsMap = createBooleanMap(droppableItems, x => getDraggableID(x));\r\n  const idx = items.findIndex(x => getDraggableID(x) === draggableID);\r\n  const item = items[idx];\r\n\r\n  setDroppableID(item, droppableID);\r\n  items.splice(idx, 1);\r\n  droppableItems.splice(destinationIdx, 0, item);\r\n\r\n  const result = [...items.filter(x => !idsMap[getDraggableID(x)]), ...droppableItems];\r\n\r\n  return result;\r\n}\r\n\r\nexport { reorder, move };\r\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__787__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","DragDropContext","props","children","onDragEnd","contextID","useMemo","nextContextID","useReducer","reducer","inititalState","state","dispatch","mergeState","resetState","onComplete","isDragging","activeDroppableID","activeDraggableID","nodeWidth","nodeHeight","scrollContainer","unsubscribers","onInsertPlaceholder","Context","Provider","createContext","activeDroppableGroupID","action","useDragDropContext","useContext","CONTEXT_ID_ATTR","DROPPABLE_ID_ATTR","DRAGGABLE_ID_ATTR","setStyles","node","style","namesMap","zIndex","transformOrigin","keys","propertyName","setProperty","removeStyles","getPropertyValue","removeProperty","removeStyleAttrIfEmpty","getItemNodes","droppableID","Array","from","document","querySelectorAll","detectIsActiveDraggableNode","getAttribute","getActiveDraggableNode","querySelector","getScrollContainer","getComputedStyle","excludeStaticParent","position","overflowRegex","body","parentElement","test","overflow","overflowY","overflowX","getNodeSize","rect","window","marginTop","parseInt","marginBottom","marginRight","marginLeft","safeNumber","width","height","precision","Number","toFixed","removeAttribute","createBooleanMap","items","getID","reduce","acc","x","debounce","fn","timeout","timerID","clearTimeout","setTimeout","args","Droppable","memo","droppableGroupID","direction","transitionTimeout","transitionTimingFn","debounceTimeout","disabled","onDragOver","isSomeDragging","isActiveGroup","isActive","rootRef","useRef","nearestNodeRef","scope","removePlaceholder","nodes","current","useEffect","forEach","options","rootNode","onIntersect","handleEvent","e","draggableNode","droppableRect","getBoundingClientRect","draggableRect","draggableRectTop","top","draggableRectLeft","left","droppableRectTop","droppableRectLeft","droppableRectHeight","droppableRectWidth","targetNode","target","pointer","MouseEvent","clientX","clientY","TouchEvent","touches","addEventListener","unsubscribe","removeEventListener","push","performUnsubscribers","useIntersectionEffect","transformNodesByTarget","onMarkNearestNode","nearestNode","container","useLayoutEffect","placeholder","createElement","removeChild","flex","appendChild","usePlaceholderEffect","transformNodesByTargetOptions","useMoveSensorEffect","splice","length","hasTransform","transform","applyTransition","applyTargetNodeTransition","useMoveEndSensorEffect","sourceIdx","findIndex","targetRect","isMoving","destinationIdx","vertical","horizontal","draggableID","contextValue","DroppableContext","ref","snapshot","onDragStart","defaultHandleDragStart","defaultProps","useDroppableContext","preventDefault","targetNodeStyle","isVertical","droppableNode","getActiveDroppableNode","paddingTop","paddingLeft","droppableTop","droppableLeft","getDroppableContainerOffsets","offset","getHorizontalDirectionOffset","styles","transition","minimalDiff","Infinity","fns","thresholdY","innerHeight","thresholdX","innerWidth","getThreshold","map","diff","idx","Draggable","removeSensor","rootProps","draggable","draggableProps","onMouseDown","startEvent","buttons","startPointer","handleMoveEvent","moveEvent","movePointer","applyMoveSensor","setNodeDragStyles","removeNodeStyles","onTouchStart","overflowValue","unblockScroll","y","getCoordinates","transformNodePosition","requestAnimationFrame","isRoot","element","shift","scrollY","scrollTop","scroll","behavior","scrollX","scrollLeft","reorder","getDroppableID","getDraggableID","droppableItems","filter","idsMap","removed","move","setDroppableID","item"],"sourceRoot":""}